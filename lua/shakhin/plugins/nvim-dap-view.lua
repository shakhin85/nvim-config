return {
	{
		"mfussenegger/nvim-dap",
		lazy = true,
	},
	{
		"mfussenegger/nvim-dap-python",
		dependencies = { "mfussenegger/nvim-dap" },
		ft = "python",
		config = function()
			local function find_python_path()
				local cwd = vim.fn.getcwd()

				-- 1. –ò—â–µ–º .venv –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
				local venv_paths = {
					cwd .. "/.venv/bin/python",
					cwd .. "/.venv/Scripts/python.exe", -- Windows
					cwd .. "/venv/bin/python",
					cwd .. "/venv/Scripts/python.exe", -- Windows
				}

				for _, path in ipairs(venv_paths) do
					if vim.fn.executable(path) == 1 then
						print("Using virtual environment Python: " .. path)
						return path
					end
				end

				-- 2. –ò—â–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
				local global_paths = {
					vim.fn.expand("~/.pyenv/shims/python"),
					vim.fn.expand("~/anaconda3/bin/python"),
					vim.fn.expand("~/miniconda3/bin/python"),
				}

				for _, path in ipairs(global_paths) do
					if vim.fn.executable(path) == 1 then
						print("Using global environment Python: " .. path)
						return path
					end
				end

				-- 3. –°–∏—Å—Ç–µ–º–Ω—ã–π Python
				local system_paths = { "python3", "python", "python3.11", "python3.10", "python3.9" }

				for _, cmd in ipairs(system_paths) do
					local path = vim.fn.exepath(cmd)
					if path ~= "" then
						print("Using system Python: " .. path)
						return path
					end
				end

				vim.notify("Python interpreter not found!", vim.log.levels.ERROR)
				return "python3"
			end

			local python_path = find_python_path()
			require("dap-python").setup(python_path)
		end,
	},
	{
		"rcarriga/cmp-dap",
		dependencies = {
			"hrsh7th/nvim-cmp",
			"mfussenegger/nvim-dap",
		},
		config = function()
			local cmp = require("cmp")

			-- –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö DAP-view –±—É—Ñ–µ—Ä–æ–≤ –∏ DAP REPL
			cmp.setup.filetype({
				"dap-view", -- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ (Breakpoints, Exceptions, Sessions, Scopes, Threads, Watches)
				"dap-view-term", -- –¢–µ—Ä–º–∏–Ω–∞–ª
				"dap-view-help", -- –ü–æ–º–æ—â—å
				"dap-repl", -- REPL (–æ—Ç nvim-dap)
			}, {
				sources = cmp.config.sources({
					{ name = "dap" },
				}, {
					{ name = "buffer" },
				}),
				completion = {
					autocomplete = {
						cmp.TriggerEvent.TextChanged,
					},
					keyword_length = 0,
				},
				mapping = {
					-- –ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Ctrl+J/K
					["<C-j>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							cmp.select_next_item()
						else
							fallback()
						end
					end, { "i", "s" }),

					["<C-k>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							cmp.select_prev_item()
						else
							fallback()
						end
					end, { "i", "s" }),

					-- Tab –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –∏ –≤—Å—Ç–∞–≤–∫–∏
					["<Tab>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							cmp.confirm({ select = true })
						else
							-- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ—á–∫–∞ –ø–µ—Ä–µ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
							local line = vim.api.nvim_get_current_line()
							local col = vim.api.nvim_win_get_cursor(0)[2]
							local before_cursor = string.sub(line, 1, col)

							-- –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞ –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
							if string.match(before_cursor, "[%w_]%.$") or string.match(before_cursor, "[%w_]+$") then
								cmp.complete()
							else
								fallback()
							end
						end
					end, { "i", "s" }),

					-- Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
					["<CR>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							cmp.confirm({ select = true })
						else
							fallback()
						end
					end, { "i", "s" }),

					-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
					["<C-Space>"] = cmp.mapping.complete(),
					["<C-e>"] = cmp.mapping.abort(),
					["<C-b>"] = cmp.mapping.scroll_docs(-4),
					["<C-f>"] = cmp.mapping.scroll_docs(4),
				},
				formatting = {
					format = function(entry, vim_item)
						local icons = {
							dap = "üêõ",
							buffer = "üìù",
						}
						vim_item.kind = (icons[entry.source.name] or "‚Ä¢") .. " " .. vim_item.kind
						vim_item.menu = ({
							dap = "[Debug Variables]",
							buffer = "[Buffer Text]",
						})[entry.source.name]
						return vim_item
					end,
				},
				window = {
					completion = cmp.config.window.bordered({
						border = "rounded",
					}),
					documentation = cmp.config.window.bordered({
						border = "rounded",
					}),
				},
				experimental = {
					ghost_text = true,
				},
			})

			-- –ê–≤—Ç–æ–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ DAP –±—É—Ñ–µ—Ä–∞—Ö
			vim.api.nvim_create_autocmd("FileType", {
				pattern = { "dap-view", "dap-view-term", "dap-view-help", "dap-repl" },
				callback = function()
					-- –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–æ—á–∫–∏
					vim.api.nvim_create_autocmd("TextChangedI", {
						buffer = 0,
						callback = function()
							local line = vim.api.nvim_get_current_line()
							local col = vim.api.nvim_win_get_cursor(0)[2]
							local before_cursor = string.sub(line, col, col)

							-- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
							if before_cursor == "." then
								vim.defer_fn(function()
									if vim.api.nvim_get_mode().mode == "i" then
										cmp.complete()
									end
								end, 100)
							end
						end,
					})
				end,
			})
		end,
	},
	{
		"igorlfs/nvim-dap-view",
		dependencies = { "mfussenegger/nvim-dap" },
		---@module 'dap-view'
		---@type dapview.Config
		opts = {
			winbar = {
				show = true,
				sections = { "scopes", "watches", "breakpoints", "threads", "console", "repl" },
				default_section = "scopes",
				base_sections = {
					breakpoints = {
						keymap = "B",
						label = "üî¥ Breakpoints [B]",
						short_label = "üî¥ [B]",
						action = function()
							require("dap-view.views").switch_to_view("breakpoints")
						end,
					},
					scopes = {
						keymap = "S",
						label = "üîç Variables [S]",
						short_label = "üîç [S]",
						action = function()
							require("dap-view.views").switch_to_view("scopes")
						end,
					},
					exceptions = {
						keymap = "E",
						label = "‚ö†Ô∏è  Exceptions [E]",
						short_label = "‚ö†Ô∏è  [E]",
						action = function()
							require("dap-view.views").switch_to_view("exceptions")
						end,
					},
					watches = {
						keymap = "W",
						label = "üëÄ Watches [W]",
						short_label = "üëÄ [W]",
						action = function()
							require("dap-view.views").switch_to_view("watches")
						end,
					},
					threads = {
						keymap = "T",
						label = "üßµ Threads [T]",
						short_label = "üßµ [T]",
						action = function()
							require("dap-view.views").switch_to_view("threads")
						end,
					},
					repl = {
						keymap = "R",
						label = "üíª REPL [R]",
						short_label = "üíª [R]",
						action = function()
							require("dap-view.repl").show()
						end,
					},
					console = {
						keymap = "C",
						label = "üì∫ Console [C]",
						short_label = "üì∫ [C]",
						action = function()
							require("dap-view.views").switch_to_view("console")
						end,
					},
				},
				custom_sections = {
					logs = {
						keymap = "L",
						label = "üìã Debug Logs [L]",
						short_label = "üìã [L]",
						action = function()
							vim.cmd("messages")
						end,
					},
				},
				controls = {
					enabled = true,
					position = "left",
					buttons = {
						"play",
						"step_over",
						"step_into",
						"step_out",
						"terminate",
						"run_last",
					},
					custom_buttons = {
						restart = {
							icon = "üîÑ",
							action = function()
								require("dap").restart()
							end,
							tooltip = "Restart debugging session",
						},
					},
				},
			},
			windows = {
				height = 0.3,
				position = "below",
				terminal = {
					width = 0.6,
					position = "right",
					hide = {},
					start_hidden = false,
				},
			},
			icons = {
				disabled = "‚≠ï",
				disconnect = "üîå",
				enabled = "‚úÖ",
				filter = "üîç",
				negate = "‚ùå",
				pause = "‚è∏Ô∏è ",
				play = "‚ñ∂Ô∏è ",
				run_last = "üîÑ",
				step_back = "‚¨ÖÔ∏è ",
				step_into = "‚¨áÔ∏è ",
				step_out = "‚¨ÜÔ∏è ",
				step_over = "‚û°Ô∏è ",
				terminate = "‚èπÔ∏è ",
			},
			help = {
				border = "rounded",
			},
			switchbuf = "useopen,usetab",
			auto_toggle = true,
			follow_tab = true,
		},
		keys = {
			-- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ª–∞–¥–∫–∏
			{
				"<F5>",
				function()
					require("dap").continue()
				end,
				desc = "‚ñ∂Ô∏è  Debug: Continue",
			},
			{
				"<F6>",
				function()
					require("dap").pause()
				end,
				desc = "‚è∏Ô∏è  Debug: Pause",
			},
			{
				"<F10>",
				function()
					require("dap").step_over()
				end,
				desc = "‚û°Ô∏è  Debug: Step Over",
			},
			{
				"<F11>",
				function()
					require("dap").step_into()
				end,
				desc = "‚¨áÔ∏è  Debug: Step Into",
			},
			{
				"<F12>",
				function()
					require("dap").step_out()
				end,
				desc = "‚¨ÜÔ∏è  Debug: Step Out",
			},

			-- Breakpoints
			{
				"<leader>db",
				function()
					require("dap").toggle_breakpoint()
				end,
				desc = "üî¥ Toggle Breakpoint",
			},
			{
				"<leader>dB",
				function()
					require("dap").set_breakpoint(vim.fn.input("Breakpoint condition: "))
				end,
				desc = "üî¥ Conditional Breakpoint",
			},
			{
				"<leader>dc",
				function()
					require("dap").clear_breakpoints()
				end,
				desc = "üóëÔ∏è  Clear All Breakpoints",
			},

			-- DAP View —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
			{
				"<leader>dv",
				function()
					require("dap-view").toggle()
				end,
				desc = "üëÅÔ∏è  Toggle DAP View",
			},
			{
				"<leader>ds",
				function()
					require("dap-view.views").switch_to_view("scopes")
				end,
				desc = "üîç Show Variables",
			},
			{
				"<leader>dw",
				function()
					require("dap-view.views").switch_to_view("watches")
				end,
				desc = "üëÄ Show Watches",
			},
			{
				"<leader>dr",
				function()
					require("dap-view.repl").show()
				end,
				desc = "üíª Open REPL",
			},

			-- –°–µ—Å—Å–∏–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å
			{
				"<leader>dt",
				function()
					require("dap").terminate()
				end,
				desc = "‚èπÔ∏è  Terminate",
			},
			{
				"<leader>dl",
				function()
					require("dap").run_last()
				end,
				desc = "üîÑ Run Last",
			},
			{
				"<leader>dR",
				function()
					require("dap").restart()
				end,
				desc = "üîÑ Restart Session",
			},

			-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–¥–æ–±—Å—Ç–≤–∞
			{
				"<leader>de",
				function()
					require("dap").set_exception_breakpoints()
				end,
				desc = "‚ö†Ô∏è  Exception Breakpoints",
			},
			{
				"<leader>dh",
				function()
					require("dap.ui.widgets").hover()
				end,
				desc = "‚ùì Hover Info",
			},
			{
				"<leader>dp",
				function()
					require("dap.ui.widgets").preview()
				end,
				desc = "üëÅÔ∏è  Preview",
			},

			-- –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ filetype
			{
				"<leader>dft",
				function()
					print("Current filetype: " .. vim.bo.filetype)
					print("Buffer type: " .. vim.bo.buftype)
				end,
				desc = "üîç Debug filetype",
			},
		},
	},
}
